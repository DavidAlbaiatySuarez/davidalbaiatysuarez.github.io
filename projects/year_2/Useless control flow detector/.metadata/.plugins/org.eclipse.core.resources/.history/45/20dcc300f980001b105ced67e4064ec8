package detectors;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.visitor.VoidVisitor;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

//public class RecursionDetector extends VoidVisitorAdapter<Object>
public class RecursionDetector extends VoidVisitorAdapter<List<String>>{
	
	/*
	@Override
    public void visit(MethodCallExpr c, List<String> collector) {
		super.visit(c, collector);
		// Start line of calls to method (TODO implement recursion only)
		System.out.println(c.getRange().get().begin.line);
			
		System.out.println(c.getNameAsString());
		System.out.println(c.getArguments());
		collector.add(c.getNameAsString());
		
		System.out.println(c.getParentNode().get().getParentNode().get().getParentNodeForChildren());
	}
	*/
	@Override
	public void visit(MethodDeclaration md, List<String> collector) {
		super.visit(md,  collector);
		
		md.findAll(MethodCallExpr.class).forEach(statement ->{
			// If condition met, polymorphic recursion detected
			if(statement.getNameAsString().equals(md.getNameAsString())){
				// Get method name as string
				String methodName = md.getNameAsString();
				// Get start line of the recursion 
				int begin = statement.getRange().get().begin.line;
				// Get end line of the recursion 
				int end = statement.getRange().get().end.line;
				
				collector.add(methodName+","+begin+","+end);
			}
		});
	}


	public static void main(String[] args) {
       
		try {
			CompilationUnit cu = JavaParser.parse(new FileInputStream("Calculator.java"));
			VoidVisitor<List<String>> methodVisitor = new RecursionDetector();
			List<String> collector = new ArrayList<>();
			
			methodVisitor.visit(cu, collector);
			
			System.out.println("Recursion:");
			// TODO Add the name of the class for which the method belongs to:
			collector.forEach(statement -> {
				String[] temp = statement.split(",");
				Breakpoints uselessControlFlow = new Breakpoints(temp[0],
																temp[1],
																temp[2]
																);
				System.out.println(uselessControlFlow);
			});
			
			
		}catch (FileNotFoundException e) {
			e.printStackTrace();
		}
    }
	
}
