package detectors;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.visitor.VoidVisitor;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

//public class RecursionDetector extends VoidVisitorAdapter<Object>
public class RecursionDetector extends VoidVisitorAdapter<List<String>>{
	
	@Override
	public void visit(MethodDeclaration md, List<String> collector) {
		super.visit(md,  collector);
		
		Optional<Node> t = md.getParentNode();
		System.out.println(t);
		
		md.findAll(MethodCallExpr.class).forEach(statement ->{
			// If condition met, polymorphic recursion detected
			if(statement.getNameAsString().equals(md.getNameAsString())){
				// Get method name as string
				String methodName = md.getNameAsString();
				// Get start line of the recursion 
				int begin = statement.getRange().get().begin.line;
				// Get end line of the recursion 
				int end = statement.getRange().get().end.line;
				
				collector.add(methodName+","+begin+","+end);
			}
		});
	}
	
}
